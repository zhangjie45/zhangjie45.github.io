TypeScript 基础类型
==================================

:date: 2021-04-20
:tags: html,JavaScript,typeScript


.. contents::

.. _tsintroduction_rst:


布尔值
^^^^^^^^^^^^^^^^^

最基本的数据类型就是简单的tru/false值，在JavaScript和TypeScript里叫做 **boolean**::

   let isDone: boolean = false

数字
^^^^^

和JS一样，TypeScript里的所有数字都是浮点数。这些浮点数的类型是 **number** 。除了支持十进制和十六进制字面量，TS还支持ECMAScript 2015中引入的二进制和八进制字面量::

   let decLiteral: number = 6;
   let hexLiteral: number = 0xf00d;
   let binaryLiteral: number = 0b1010;
   let octalLiteral: number = 0o744;

字符串
^^^^^^^

使用单引号或双引号都可以表示字符串::

   let name: string = "bob";
   name = "smith";

**模板字符串**

字符串被反引号包围（`）,以${str}这种形式嵌入表达式::

   let name: string = `Tom`
   let sentence: string = `my name is ${name}`; 

数组
^^^^^

有两种方式定义数组

   - 可以在元素类型后面接上[]，表示由此类型元素组成的一个数组 ::

      let list: number[] = [1,2,3];

   - 使用数组泛型，Array<元素类型> ::

      let list: Array<number> = [1,2,3];

元组
^^^^^

元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。比如可以定义一对值分别为string和number类型的元组::

   let x: [string,number];
   x = ['hello',10]; //ok
   x = [10, 'hello']; //error

枚举
^^^^^^

enum类型是对js标准数据类型的一个补充::

   enum Color {Red,Green,Blue}
   let c: Color = Color.Green;

任意值
^^^^^^

对于编程阶段不清楚类型的变量，可以使用any类型来标记这些变量::

   let notSure: any = 4;
   notSure = "maybe a string instead";
   notSure = false;

同样当一个数组包含了不同的数据类型时，也可以用任意值::

   let list:any[] = [1,true,"String"];
   list[1] = 100;

空值
^^^^^^

void类型像是与any类型相反，它表示没有任何类型。当一个函数没有返回值时，通常其返回值类型是void::

   function warnUser(): void {
      alert("This is my warning message");
   }

